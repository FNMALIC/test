# Generated by Django 4.2.3 on 2023-08-15 08:30

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('app', '0002_delete_user'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('first_name', models.CharField(max_length=50, null=True)),
                ('last_name', models.CharField(max_length=50, null=True)),
                ('date_birth', models.DateField(null=True)),
                ('mobile_phone', models.CharField(max_length=14, null=True)),
                ('street_address', models.CharField(max_length=50, null=True)),
                ('postal_code', models.CharField(max_length=45, null=True)),
                ('city', models.CharField(max_length=60, null=True)),
                ('country', models.CharField(max_length=60, null=True)),
                ('Favourite_national_team', models.CharField(max_length=50, null=True)),
                ('Favourite_city', models.CharField(max_length=60, null=True)),
                ('favourite_language', models.CharField(max_length=60, null=True)),
                ('club_coeur', models.CharField(max_length=60, null=True)),
                ('sexe_user', models.CharField(max_length=50, null=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('password_user', models.CharField(max_length=90, null=True)),
                ('card_number', models.CharField(max_length=35, null=True)),
                ('exp_date', models.CharField(max_length=35, null=True)),
                ('CVV', models.CharField(max_length=4, null=True)),
                ('account_name', models.CharField(max_length=53, null=True)),
                ('owner_name', models.CharField(max_length=50, null=True)),
                ('IBAN_accountNumber', models.CharField(max_length=50, null=True)),
                ('BIC_SWIFT', models.CharField(max_length=60, null=True)),
                ('address_gmail', models.CharField(max_length=95, null=True)),
                ('password_gmail', models.CharField(max_length=95, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
